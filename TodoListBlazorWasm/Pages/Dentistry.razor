@page "/Dentistry"
@using TodoList.Models
@using TodoListBlazorWasm.Services
@using TodoListBlazorWasm.Components
@inject IConfiguration Configuration
@inject IToastService toastService

@if(Patients == null)
{
    <div>loading.......</div>
}
else
{
    <div>
        <div class="titleLayout">
            <h3>Danh sách bệnh nhân</h3>
            <button type="submit" class="btn btn-primary" @onclick="()=>OpenAddPatientPopup()">
                <i class="ri-user-add-line"></i>
                Thêm bệnh nhân
            </button>
        </div>

        <table class="table mt-3">
            <thead>
                <tr>
                    <th>Họ và tên</th>
                    <th>Giới tính</th>
                    <th>Ngày sinh</th>
                    <th>Nghề nghiệp</th>
                    <th>Số điện thoại</th>
                    <th>Địa chỉ</th>
                    <th>Ngày tạo</th>
                    <th width="23%"></th>
                </tr>
            </thead>
            <tbody class="justify-content-center align-items-sm-center">
                @foreach (var item in Patients)
                {
                    <tr>
                        <td class="align-middle">@item.Name</td>
                        <td class="align-middle">@item.Gender</td>
                        <td class="align-middle">@item.DateOfBirth.ToString(Configuration["DateOnlyFormat"])</td>
                        <td class="align-middle">@item.Job</td>
                        <td class="align-middle">@item.PhoneNumber</td>
                        <td class="align-middle">@item.Address</td>
                        <td class="align-middle">@item.CreatedDate.ToString(Configuration["DateTimeFormat"])</td>
                        <td>
                            <a href="/PatientDetails/@item.PatientId" class="btn btn-outline-primary">
                                <i class="ri-user-3-line"></i>
                                Chi tiết
                            </a>
                            <a href="/EditPatient/@item.PatientId" class="btn btn-outline-primary">
                                <i class="ri-edit-line"></i>
                                Sửa
                            </a>
                            <button class="btn btn-primary" @onclick="()=>OnDeletePatient(item.PatientId)">
                                <i class="ri-delete-bin-line"></i>
                                Xoá
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <PatientAddDentistry @ref="addPatientDialog" OnPatientAdded="AddPatientToList" />

    <Confirmation ConfirmationMessage="Xác nhận xoá bệnh nhân"
                    ConfirmationTitle="Xoá bệnh nhân"
                    @ref="DeleteConfirmation"
                    ConfirmationChanged="OnConfirmDeletePatient">

    </Confirmation>
}

@code {
    private PatientRequest patientModel = new PatientRequest();
    private PatientUpdateRequest patientUpdateModel = new PatientUpdateRequest();
    private TreatProgressRequest treatProgressModel = new TreatProgressRequest();
    private bool ShowError = true;

    protected PatientAddDentistry addPatientDialog { get; set; }

    public void OpenAddPatientPopup()
    {
        addPatientDialog.Show();
    }

    [Inject] private IPatientApiClient PatientApiClient { set; get; }

    private List<PatientRequest> Patients;

    protected Confirmation DeleteConfirmation { set; get; }

    private Guid DeleteId { set; get; }

    protected override async Task OnInitializedAsync()
    {
        Patients = await PatientApiClient.GetPatientList();
    }

    private async void AddPatientToList(PatientRequest newPatient)
    {
        Patients.Add(newPatient);
        StateHasChanged();
        Patients = await PatientApiClient.GetPatientList();
    }

    public void OnDeletePatient(Guid deleteId)
    {
        DeleteId = deleteId;
        DeleteConfirmation.Show();
    }
    public async Task OnConfirmDeletePatient(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await PatientApiClient.DeletePatient(DeleteId);
            Patients = await PatientApiClient.GetPatientList();
            toastService.ShowInfo("Xoá thành công");
        }
    }
}
